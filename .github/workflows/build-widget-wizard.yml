name: Build Widget Wizard

on:
  # 1) Automatic trigger on tag push
  push:
    tags:
      - "*"
  # 2) Manual trigger from the Actions tab
  workflow_dispatch:
    inputs:
      tag_name:
        description: "Existing tag to build (creates/updates a pinned LTS/stable release)"
        required: true
      make_latest:
        description: "true = mark this build as the Latest release"
        required: false
        default: "false"

jobs:
  build-acap:
    name: Build Widget Wizard Binary
    runs-on: ubuntu-latest

    steps:
      # Determine which tag to build:
      # - If triggered by push (tags), use github.ref_name
      # - If triggered manually (workflow_dispatch), use inputs.tag_name
      - name: Set TAG variable
        id: set_tag
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            echo "TAG=${{ inputs.tag_name }}" >> $GITHUB_ENV
          else
            # 'refs/tags/x.y.z' -> 'x.y.z'
            SHORT_REF="${GITHUB_REF#refs/tags/}"
            echo "TAG=$SHORT_REF" >> $GITHUB_ENV
          fi

      # Decide how the release should be published:
      # - Always publish under the real version tag (env.TAG)
      # - Mark as "Latest" on tag-push builds or when make_latest=true is chosen manually
      - name: Set RELEASE_META variables
        run: |
          echo "RELEASE_TAG=${{ env.TAG }}" >> "$GITHUB_ENV"

          # Decide whether this build is the public "Latest":
          if [ "${{ github.event_name }}" = "push" ] || [ "${{ github.event.inputs.make_latest }}" = "true" ]; then
            MAKE_LATEST=true
          else
            MAKE_LATEST=false
          fi
          echo "MAKE_LATEST=$MAKE_LATEST" >> "$GITHUB_ENV"

          # Distinct release names:
          if [ "$MAKE_LATEST" = "true" ]; then
            echo "RELEASE_NAME=Build for ${{ env.TAG }}" >> "$GITHUB_ENV"
          else
            echo "RELEASE_NAME=Pinned LTS for ${{ env.TAG }}" >> "$GITHUB_ENV"
          fi

      # Check out the repository at the correct tag:
      - name: Check out repository
        uses: actions/checkout@v3
        with:
          ref: ${{ env.TAG }}

      # OPTIONAL: Validate the TAG format (e.g., x.y.z):
      - name: Validate tag
        if: ${{ github.event_name == 'workflow_dispatch' }}
        run: |
          if [[ ! "${{ env.TAG }}" =~ ^[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
            echo "Tag must be in the format x.y.z"
            exit 1
          fi

      # Set up Docker Buildx:
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      # Build the Docker image (equivalent to `make dockersetup`):
      - name: Build Docker Image
        run: |
          docker buildx build \
            --load \
            --progress=plain \
            -f docker/Dockerfile \
            ./docker -t widget_wizard_img_aarch64

      # Run ACAP build inside Docker (equivalent to `make acap`):
      - name: Build .eap inside Docker
        run: |
          docker run --rm \
            -v ${{ github.workspace }}:/workspace \
            -w /workspace \
            widget_wizard_img_aarch64 \
            ./docker/build_aarch64.sh 1 widget_wizard "Widget Wizard" y

      # Detect the .eap file produced by the build:
      - name: Find EAP file
        id: find_eap
        run: |
          EAP_FILE=$(ls -1 *.eap 2>/dev/null | head -n1)
          if [ -z "$EAP_FILE" ]; then
            echo "No .eap file found!"
            exit 1
          fi
          echo "Found EAP file: $EAP_FILE"
          echo "EAP_FILE=$EAP_FILE" >> $GITHUB_OUTPUT

      # Create or update the public "Latest" release (auto or manual with make_latest=true)
      # or a pinned/LTS release (manual with make_latest=false), and upload the EAP asset:
      - name: Create or Update GitHub Release
        uses: ncipollo/release-action@v1
        with:
          tag: ${{ env.RELEASE_TAG }}
          name: ${{ env.RELEASE_NAME }}
          allowUpdates: true
          makeLatest: ${{ env.MAKE_LATEST }}
          draft: false
          prerelease: false
          artifacts: ${{ steps.find_eap.outputs.EAP_FILE }}
          artifactContentType: application/octet-stream
          token: ${{ secrets.GITHUB_TOKEN }}
